## Workflow rationale:
##
## On branch master
## - `build_image`: only if dockerfile/requirements are updated
## - `render_website`: renders the webpage using mkdocs
## - `deploy_staging_website`, rsyncs the artifact to an apache-served path which 
##   will be rendered at staging.omnibenchmark.org
## - `deploy_production_website` (manual), rsyncs the artifact to the apache-served path
##   at omnibenchmark.org and production.org. This step is manual, as visual
##   inspection of staging.omnibenchmark.org is recommended first
##  
## On another branch (nonmaster)
## - `build_image`: only if dockerfile/requirements are updated
## - `render_website`: on any commit
##   It generates the webpage as an artifact.
## - `review_website`, rsyncs the artifact to an apache-served path which 
##   will be rendered at review.omnibenchmark.org
## - `stop_review` (manual), removes the contents of review.omnibenchmark.org. This step is 
##   manual, as visual inspection of the review.omnibenchmark.org is required.
##
##
## Runners:
## - Tasks run by a docker executor are untagged
## - Tasks run by a shell executor are tagged
##
##
## Schedules:
## - Due to the workflow rationale, only trigger the `retrieve_omnibenchmark_data` step,
##  whose commit will trigger downstream jobs with an updated HEAD 

stages:
  - build
  - update
  - render
  - review
  - staging
  - production

variables:
  ## GIT_STRATEGY: clone ## uncomment if cache problems

image_build:
  stage: build
  image: docker:stable
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE --no-cache .
    - docker push $CI_REGISTRY_IMAGE
  cache: []
  rules:
    - when: always

render_website:
  stage: update
  image: 
    name: $CI_REGISTRY_IMAGE:latest
  before_script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - url_host=$(git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g")
    - git remote set-url --push origin "https://oauth2:${CI_PUSH_TOKEN}@${url_host}"
  script:
    - export GIT_PYTHON_REFRESH=quiet
    - git pull origin $CI_COMMIT_REF_NAME
    - mkdocs build --site-dir public -v # render mkdocs website
    - pwd && ls -l && cd public && ls -l
  artifacts:
    paths:
      - public
      - data
  rules:
    - if:  $CI_PIPELINE_SOURCE == "schedule"
      when: always 
    - when: always

review_website:
  stage: review
  script:
    - rsync -av --delete public /var/www/html/gitlab/review
  environment:
    name: review
    url: http://review.$APPS_DOMAIN
    on_stop: stop_review
  tags:
    - deploy_shell
  needs: ['render_website']
  rules:
    - if: ($CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "schedule")
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never

stop_review:
  stage: review
  script:
    - rm -rf public /var/www/html/gitlab/review
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review
    action: stop
  needs: ['render_website']
  rules:
    - if: ($CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "schedule")
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never
  tags:
    - deploy_shell

deploy_staging_website:
  stage: staging
  script:
    - rsync -av --delete public /var/www/html/gitlab/staging
  environment:
    name: staging
    url: http://staging.$APPS_DOMAIN
  needs: ['render_website']
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never
  tags:
    - deploy_shell

deploy_production_website:
  stage: production
  script:
    - rsync -av --delete public /var/www/html/gitlab/production
  environment:
    name: production
    url: http://production.$APPS_DOMAIN
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never
  tags:
    - deploy_shell
