FROM ubuntu:jammy

LABEL org.label-schema.license="GPL-2.0" \
      org.label-schema.vcs-url="https://github.com/rocker-org/r-ubuntu" \
      org.label-schema.vendor="Rocker Project" \
      maintainer="Dirk Eddelbuettel <edd@debian.org>"

RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
		software-properties-common \
		ca-certificates \
                python3 python3-setuptools \
                python3-pip \
                bzip2 gzip tar zip unzip xz-utils tcl-dev \
                curl wget rsync cpio locales \
                patch make  \
                file git debianutils \
                gcc \
                libibverbs-dev \
                libssl-dev \
                binutils libthread-queue-any-perl \
                procps \
                man libdb-dev \
         && apt clean


## Configure default locale
RUN echo "C.UTF-8 UTF-8" >> /etc/locale.gen \
	&& locale-gen C.utf8 \
	&& /usr/sbin/update-locale LANG=C.UTF-8

ENV LC_ALL C.UTF-8
ENV LANG C.UTF-8


# install lmod start
RUN <<EOF
LUA_VERS=5.1.4.8
mkdir -p /opt/apps/lua && cd /opt/apps/lua
wget --quiet https://sourceforge.net/projects/lmod/files/lua-"$LUA_VERS".tar.gz/download
tar xzf download
cd lua*8
./configure --prefix=/opt/apps/lua/"$LUA_VERS"
make; make install
cd /opt/apps/lua; ln -s "$LUA_VERS" lua
mkdir -p /usr/local/bin; ln -s /opt/apps/lua/lua/bin/lua /usr/local/bin
ln -s /opt/apps/lua/lua/bin/luac /usr/local/bin

LMOD_VERS=8.7
mkdir -p /usr/share/lmod/ && cd /usr/share/lmod
wget --quiet https://sourceforge.net/projects/lmod/files/Lmod-"$LMOD_VERS".tar.bz2/download
tar xfj download && cd Lmod-"$LMOD_VERS"
./configure --prefix=/usr/share/ && make install
export PATH=/usr/share/lmod/lmod/libexec/:"$PATH"
. /usr/share/lmod/lmod/init/bash
export LMOD_CMD=/usr/share/lmod/lmod/libexec/lmod
ln -s /usr/share/lmod/lmod/libexec/lmod /usr/local/bin
ln -s /usr/share/lmod/lmod/init/profile        /etc/profile.d/z00_lmod.sh
ln -s /usr/share/lmod/lmod/init/cshrc          /etc/profile.d/z00_lmod.csh

# # install lmod end

# install EasyBuild using pip3 this time
python3 -m pip install -U pip
python3 -m pip install wheel
python3 -m pip install -U setuptools==70.1.1
python3 -m pip install easybuild==4.9.2
python3 -m pip install rich
EOF

# create easybuild user
RUN useradd -s /bin/bash -m easybuild \
	&& usermod -a -G easybuild

RUN <<EOF
# create /app software installation prefix + /scratch sandbox directory
if [ ! -d /app ]; then mkdir -p /app; chown easybuild:easybuild -R /app; fi
if [ ! -d /scratch ]; then mkdir -p /scratch; chown easybuild:easybuild -R /scratch; fi
if [ ! -d /home/easybuild ]; then mkdir -p /home/easybuild; chown easybuild:easybuild -R /home/easybuild;fi

chown -R easybuild:easybuild /app/
chown -R easybuild:easybuild /home/easybuild/
chown -R easybuild:easybuild /scratch/
EOF

# install Lmod RC file
RUN cat <<EOD >> /etc/lmodrc.lua
scDescriptT = {
  {
    ["dir"]       = "/app/lmodcache",
    ["timestamp"] = "/app/lmodcache/timestamp",
  },
}
EOD

# verbose commands, exit on first error
RUN set -ve
RUN set -o noclobber


# We set this so if we need to open the container again, we got the environment set up correctly
RUN cat <<EOG >> /home/easybuild/.bashrc
export EASYBUILD_PREFIX=/scratch
export EASYBUILD_TMPDIR=/scratch/tmp
export EASYBUILD_SOURCEPATH=/scratch/sources:/tmp/easybuild/sources
export EASYBUILD_INSTALLPATH=/app
export EASYBUILD_PARALLEL=EASYBUILDNTHREADSINT
export EB_PYTHON=python3
export MODULEPATH=/app/modules/all
alias eb="eb --robot --download-timeout=1000"
export PYTHONIOENCODING="utf-8"
export PATH=/usr/share/lmod/lmod/libexec/:"$PATH"
. /usr/share/lmod/lmod/init/bash
export LMOD_CMD=/usr/share/lmod/lmod/libexec/lmod
EOG



# configure EasyBuild
RUN cat <<EOD >> /home/easybuild/eb-install.sh
#!/bin/bash  
shopt -s expand_aliases
export EASYBUILD_PREFIX=/scratch 
export EASYBUILD_TMPDIR=/scratch/tmp 
export EASYBUILD_SOURCEPATH=/scratch/sources:/tmp/easybuild/sources 
export EASYBUILD_INSTALLPATH=/app 
export EASYBUILD_PARALLEL=EASYBUILDNTHREADSINT
export EB_PYTHON=python3
alias eb="eb --robot --download-timeout=1000"
export PYTHONIOENCODING="utf-8"
export PATH=/usr/share/lmod/lmod/libexec/:"$PATH"
. /usr/share/lmod/lmod/init/bash
export LMOD_CMD=/usr/share/lmod/lmod/libexec/lmod
EOD

RUN echo "eb --fetch EASYCONFIG" >>  /home/easybuild/eb-install.sh 
RUN echo "eb EASYCONFIG" >>  /home/easybuild/eb-install.sh 

RUN cat <<EOD >> /home/easybuild/eb-install.sh
mkdir -p /app/lmodcache 
$LMOD_DIR/update_lmod_system_cache_files -d /app/lmodcache -t /app/lmodcache/timestamp /app/modules/all  
EOD

RUN chown easybuild:easybuild /home/easybuild/eb-install.sh
RUN chmod a+x /home/easybuild/eb-install.sh


USER easybuild

RUN export LC_ALL=C

RUN bash /home/easybuild/eb-install.sh

RUN rm -rf /scratch/*

RUN export LMOD_CMD=/usr/share/lmod/lmod/libexec/lmod  # rather (2nd July 2024, Izaskun)
# increase threshold time for Lmod to write cache in $HOME (which we don't want to do)
RUN export LMOD_SHORT_TIME=86400
# purge any modules that may be loaded outside container
RUN module --force purge

# avoid picking up modules from outside of container
RUN module unuse $MODULEPATH
# pick up modules installed in /app
RUN export MODULEPATH="/app/modules/all"
# setting up the installation environment:
RUN USER=$(whoami)
# this seems to be needed to make sure the terminal is working:
RUN export TERM=xterm-256color
# load module(s) corresponding to installed software
RUN module load ENVMODULENAME

CMD ["bash"]
