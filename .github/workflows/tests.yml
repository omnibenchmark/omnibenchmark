name: Tests
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  run-tests:
    permissions: write-all

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        python-version: ["3.12", "3.13"]
        poetry-version: ["1.8.0"]
        r-version: ["4.3.3"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python, R, OS dependencies
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup R ${{ matrix.r-version }}
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r-version }}
          # Enable RStudio Package Manager to speed up package installation
          use-public-rspm: true
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------R------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-dependencies
        uses: actions/cache@v3
        with:
          path: | 
            .venv
            ${{ env.R_LIBS_USER }}
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.r-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # Setup conda for macos
      #----------------------------------------------
      - name: Set up conda for macOS
        if: matrix.os == 'macos-latest'
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: 'latest'
          auto-activate-base: false

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install Poetry dependencies
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: |          
          poetry install --all-extras --no-interaction --no-root

      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::argparse

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --all-extras --no-interaction

      #----------------------------------------------
      # run test suite and output coverage file for mac and linux
      #----------------------------------------------
      - name: Run tests
        run: |
          # I think lmod should be loadable/installed for tests to run?
          # source "$LMOD_PKG"/init/profile 
          # export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init
          poetry run pytest --cov=omni --cov-report=xml:./reports/coverage.xml --junitxml=./reports/junit.xml \
              tests/benchmark tests/cli tests/workflow tests/io
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'

      # #----------------------------------------------
      # # run test suite and output coverage file for windows
      # #----------------------------------------------
      # - name: Run tests
      #   run: |
      #     ## skip software tests, they're done differently
      #     poetry run pytest --cov=omni --cov-report=xml:./reports/coverage.xml --junitxml=./reports/junit.xml
      #   if: matrix.os == 'windows-latest'
      
      # #----------------------------------------------
      # # Generate badges
      # #----------------------------------------------
      # - name: Generate tests & coverage badges
      #   run: |
      #     poetry run genbadge tests -i ./reports/junit.xml -o ./reports/tests.svg
      #     poetry run genbadge coverage -i ./reports/coverage.xml -o ./reports/coverage.svg
      # #----------------------------------------------
      # # Report coverage
      # #----------------------------------------------
      # - if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12' && matrix.poetry-version == '1.8.0' && github.event.pull_request.head.repo.full_name == github.repository }}
      #   name: Comment coverage result
      #   uses: MishaKav/pytest-coverage-comment@main
      #   with:
      #     pytest-xml-coverage-path: ./reports/coverage.xml
