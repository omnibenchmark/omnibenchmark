# This pipeline simplifies the running of linting, build, short and integration tests.
name: pixi

env:
  PIXI_VERSION: v0.51.0

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - main
      - dev

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: ${{ env.PIXI_VERSION }}
          cache: true

      - name: Run linting
        run: pixi run lint

      - name: Run type checking
        run: pixi run typecheck

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: ${{ env.PIXI_VERSION }}
          cache: true

      - name: Build wheel
        run: pixi run build

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: omnibenchmark-wheel
          path: dist/*.whl
          retention-days: 7

  test-short:
    name: Short Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: ${{ env.PIXI_VERSION }}
          cache: true

      - name: Run short tests
        run: pixi run test-short
        # TODO: make sure we do coverage in pixi target:
        # uv run pytest -m short --cov --cov-branch --cov-report=xml

      # just an example of integration, CI is re-done in coming PRs
      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test-python-versions:
    name: Test Python 3.13
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: ${{ env.PIXI_VERSION }}
          cache: true

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: omnibenchmark-wheel
          path: dist/

      - name: Run Python 3.13 tests with wheel
        run: |
          pixi run -e py313 pip install dist/*.whl
          pixi run -e py313 test-py313

  test-integration:
    name: Integration Tests
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: ${{ env.PIXI_VERSION }}
          cache: true

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: omnibenchmark-wheel
          path: dist/

      - name: Install wheel for testing
        run: |
          pixi run pip install dist/*.whl

      - name: Install additional system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap

      - name: Set up module environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          export MODULEPATH="$HOME/.local/easybuild/modules/all:$GITHUB_WORKSPACE/tests/data/envs"
          echo "MODULEPATH=$MODULEPATH" >> $GITHUB_ENV

      - name: Run integration tests
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            pixi run pytest -m "not short" && pixi run pytest tests/software/
          else
            # macOS - skip platform-specific tests
            pixi run pytest -m "not short" && pixi run pytest tests/software/ -k "not apptainer"
          fi
