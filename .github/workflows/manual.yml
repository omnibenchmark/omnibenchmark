name: Manual CI Pipeline

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test'
        required: true
        default: 'linux'
        type: choice
        options:
        - linux
        - mac
        - both

jobs:
  software_testing_linux:
    if: ${{ github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'both' }}
    name: Software Tests (Linux) - Manual
    permissions: write-all
    env:
      LMOD_VERSION: "8.7.53"
    strategy:
      matrix:
        os: [ubuntu-22.04]
        test_group: [1, 2]
        python-version: ["3.12"]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache system dependencies
        id: cache-system
        uses: actions/cache@v4
        with:
          path: |
            /opt/lmod
            ~/.cache/pip
          key: system-deps-${{ runner.os }}-${{ hashFiles('**/manual.yml', '**/pyproject.toml') }}
          restore-keys: |
            system-deps-${{ runner.os }}-

      - name: Install OS & Python packages
        if: steps.cache-system.outputs.cache-hit != 'true'
        run: |
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt-get install lua5.2 liblua5.2-dev lua-filesystem lua-posix tcl tcl-dev wget unzip make
          
          # Optional: fix for lua-posix bug
          if [ ! -e /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so ] ; then
            sudo ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so
          fi

          sudo apt-get install libopenmpi-dev openmpi-bin
          pip install pep8 python-graph-core python-graph-dot

      - name: Install LMOD from source
        if: steps.cache-system.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/TACC/Lmod/archive/refs/tags/${LMOD_VERSION}.zip
          unzip ${LMOD_VERSION}.zip
          cd Lmod-${LMOD_VERSION}
      
          ./configure --prefix=/opt/lmod
          make -j$(nproc)
          sudo make install

      - name: Extra OS / apt (apptainer)
        if: steps.cache-system.outputs.cache-hit != 'true'
        run: |
          sudo apt install -y stress git wget openmpi-bin libopenmpi-dev apptainer debootstrap

      - name: Modify python version in test env
        shell: bash -el {0}
        run: |
          cp test-environment.yml test-environment-${{ matrix.python-version }}.yml
          sed -E -i 's/- conda-forge::python.+/- conda-forge::python =${{ matrix.python-version }}/' test-environment-${{ matrix.python-version }}.yml
          
          # Add cache validation check
          echo "Environment file hash: $(md5sum test-environment-${{ matrix.python-version }}.yml || md5 test-environment-${{ matrix.python-version }}.yml)"

      - name: Cache omnibenchmark environment
        uses: actions/cache@v4
        with:
          path: |
            /usr/share/miniconda3/envs
            ~/conda_pkgs_dir
            ~/.conda/pkgs
            ~/.conda/envs/omnibenchmark
            ~/.cache/pip
          key: conda-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('manual.yml', 'pyproject.toml', 'omnibenchmark/**/*.py') }}
          restore-keys: |
            conda-${{ runner.os }}-${{ matrix.python-version }}-
            conda-${{ runner.os }}-

      - name: Setup omnibenchmark environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
          use-mamba: true
          environment-file: test-environment-${{ matrix.python-version }}.yml
          activate-environment: omnibenchmark


      - name: Verify environment setup
        shell: bash -el {0}
        run: |
          echo "=== Cache hit status: ${{ steps.cache-system.outputs.cache-hit }} ==="
          echo "=== Environment file contents ==="
          cat test-environment-${{ matrix.python-version }}.yml
          echo "=== Conda environment info ==="
          conda info
          conda list | head -20


      - name: Test
        shell: bash -el {0}
        run: |
          conda info
          conda list
          
          # install the s3 and test extra dependencies
          pip install -e ".[s3]"
          pip install -e ".[test]"

          # install required python dependencies
          pip install numpy pandas scikit-learn scipy

          cd tests/software

          export LMOD_PKG=/opt/lmod/lmod/${LMOD_VERSION}
          source "$LMOD_PKG"/init/bash
          source "$LMOD_PKG"/init/profile

          export MODULEPATH="$HOME"/.local/easybuild/modules/all:"$GITHUB_WORKSPACE"/tests/data/envs
          module use $MODULEPATH

          module spider 3.6.3-foss-2017b

          # module spider
          export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init

          # invoke pytest
          pytest -v -x --show-capture=stderr \
              --splits 2 --group ${{ matrix.test_group }} --splitting-algorithm=least_duration \
              conda_tests.py singularity_tests.py test_run_with_software.py


  software_testing_mac:
    if: ${{ github.event.inputs.platform == 'mac' || github.event.inputs.platform == 'both' }}
    name: Software Tests (macOS) - Manual
    permissions: write-all
    strategy:
      matrix:
        os: [macos-14]
        test_group: [1, 2]
        python-version: ["3.12"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache system dependencies
        id: cache-system
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/Library/Caches/pip
            /opt/homebrew/var/homebrew/locks
            /opt/homebrew/Library/Homebrew/vendor/gems
          key: system-deps-${{ runner.os }}-${{ hashFiles('**/manual.yml', '**/pyproject.toml') }}
          restore-keys: |
            system-deps-${{ runner.os }}-

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        if: matrix.os == 'macos-14' || matrix.os == 'macos-13'

      - name: Install OS packages using homebrew
        if: steps.cache-system.outputs.cache-hit != 'true'
        shell: bash -el {0}
        run: |
          bash
          brew upgrade
          brew install coreutils
          brew install lmod

      - name: Modify python version in test env
        shell: bash -el {0}
        run: |
          cp test-environment.yml test-environment-${{ matrix.python-version }}.yml
          sed -E 's/- conda-forge::python.+/- conda-forge::python =${{ matrix.python-version }}/' test-environment-${{ matrix.python-version }}.yml > tmp.yml
          mv tmp.yml test-environment-${{ matrix.python-version }}.yml
          
          # Add cache validation check
          echo "Environment file hash: $(md5 test-environment-${{ matrix.python-version }}.yml || md5sum test-environment-${{ matrix.python-version }}.yml)"

      - name: Cache omnibenchmark environment
        uses: actions/cache@v4
        with:
          path: |
            /Users/runner/miniconda3/envs
            ~/conda_pkgs_dir
            ~/.conda/pkgs
            ~/.conda/envs/omnibenchmark
            ~/.cache/pip
          key: conda-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/manual.yml', 'pyproject.toml', 'omnibenchmark/**/*.py') }}
          restore-keys: |
            conda-${{ runner.os }}-${{ matrix.python-version }}-
            conda-${{ runner.os }}-

      - name: Setup omnibenchmark environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
          use-mamba: true
          environment-file: test-environment-${{ matrix.python-version }}.yml
          activate-environment: omnibenchmark


      - name: Verify environment setup
        shell: bash -el {0}
        run: |
          echo "=== Cache hit status: ${{ steps.cache-system.outputs.cache-hit }} ==="
          echo "=== Environment file contents ==="
          cat test-environment-${{ matrix.python-version }}.yml
          echo "=== Conda environment info ==="
          conda info
          conda list | head -20

      - name: Modify bashrc
        shell: bash -el {0}
        run: |
          cat <<'EOF' >>~/.bashrc
          if [ -f /opt/homebrew/opt/lmod/init/bash ]; then
               source /opt/homebrew/opt/lmod/init/profile
          fi
          if [ -f /usr/local/opt/lmod/init/bash ]; then
               source /usr/local/opt/lmod/init/profile
          fi
          export R_LIBS=~/work/Rlib
          EOF

          cat <<'EOF' >>~/.bash_profile
          source ~/.bashrc
          EOF

      - name: Test
        shell: bash -el {0}
        run: |
          source "${CONDA}/etc/profile.d/conda.sh"
          conda activate omnibenchmark
          conda info
          conda list
          
          # install the s3 and test extra dependencies
          pip install -e ".[s3]"
          pip install -e ".[test]"

          # install required Python dependenices
          pip install numpy pandas scikit-learn scipy

          cd tests/software

          if [ -f /opt/homebrew/opt/lmod/init/bash ]; then
            export LMOD_PKG=/opt/homebrew/opt/lmod
            source /opt/homebrew/opt/lmod/init/bash
          elif [ -f /usr/local/opt/lmod/init/bash ]; then
            export LMOD_PKG=/usr/local/opt/lmod
            source /usr/local/opt/lmod/init/bash
          fi
          source "$LMOD_PKG"/init/profile

          export MODULEPATH="$HOME"/.local/easybuild/modules/all:"$GITHUB_WORKSPACE"/tests/data/envs
          module use $MODULEPATH

          export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init

          pytest -v -x --show-capture=stderr \
               --splits 2 --group ${{ matrix.test_group }} \
               conda_tests.py test_run_with_software.py \
               -k 'not test_easybuild_sys_toolchain_build'