name: CI Pipeline

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  # Step 1: Run code style checks first
  lint:
    name: Code Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Linters
        run: pip install ruff

      - name: Lint with Ruff
        continue-on-error: true
        run: |
          ruff check .

  # Step 2: Run tests only if linting passes
  tests:
    name: Run Tests
    needs: lint
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12"]
        poetry-version: ["1.8.0"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Validate Poetry configuration
        run: poetry check

      - name: Load cached venv
        id: cached-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ${{ env.R_LIBS_USER }}
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies with poetry
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --extras s3 --extras test

      - name: Install library
        run: poetry install --no-interaction

      - name: Run short tests
        run: |
          poetry run pytest -m short
        if: matrix.os == 'ubuntu-latest'

      - name: Run longer tests (integration)
        run: |
          poetry run pytest -m "not short and not conda" --cov=omnibenchmark --cov-report=xml:./reports/coverage.xml \
              tests/benchmark tests/cli tests/workflow tests/io
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'

      - name: Run tests (Windows)
        run: |
          poetry run pytest --cov=omnibenchmark --cov-report=xml:./reports/coverage.xml
        if: matrix.os == 'windows-latest'

      - name: Generate tests & coverage badges
        run: |
          poetry run genbadge tests -i ./reports/junit.xml -o ./reports/tests.svg
          poetry run genbadge coverage -i ./reports/coverage.xml -o ./reports/coverage.svg

      - if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12' && matrix.poetry-version == '1.8.0' && github.event.pull_request.head.repo.full_name == github.repository }}
        name: Comment coverage result
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./reports/coverage.xml

  # Step 3: Run software tests only if regular tests pass
  software-tests-linux:
    name: Software Tests (Linux)
    needs: tests
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-22.04]
        test_group: [1, 2]
        python-version: ["3.12"]
      fail-fast: true

    # TODO: run on particular container with conda etc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Modify python version in test env
        shell: bash -el {0}
        run: |
          cp test-environment.yml test-environment-${{ matrix.python-version }}.yml
          sed -E -i 's/- conda-forge::python.+/- conda-forge::python =${{ matrix.python-version }}/' test-environment-${{ matrix.python-version }}.yml

      - name: Setup omnibenchmark environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: test-environment-${{ matrix.python-version }}.yml
          environment-name: omb
          cache-environment: false

      - name: install OS & Python packages
        run: |
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt-get install lua5.2 liblua5.2-dev lua-filesystem lua-posix tcl tcl-dev
          if [ ! -e /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so ] ; then
            sudo ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so
          fi
          sudo apt-get install libopenmpi-dev openmpi-bin
          pip install pep8 python-graph-core python-graph-dot

      - name: Extra OS / apt (apptainer)
        run: |
          sudo apt install -y stress git wget openmpi-bin libopenmpi-dev apptainer debootstrap

      - name: Test
        env:
          CI: false
        shell: bash -el {0}
        run: |
          pip install -e ".[s3]"
          pip install -e ".[test]"
          pip install numpy pandas scikit-learn scipy

          cd tests/software

          source "$LMOD_PKG"/init/profile

          export MODULEPATH="$HOME"/.local/easybuild/modules/all:"$GITHUB_WORKSPACE"/tests/data/envs
          module use $MODULEPATH

          module spider 3.6.3-foss-2017b

          export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init

          pytest -v -x --show-capture=stderr \
              --splits 2 --group ${{ matrix.test_group }} --splitting-algorithm=least_duration \
              cli_conda_tests.py cli_singularity_tests.py cli_envmodules_tests.py \
              conda_tests.py singularity_tests.py envmodules_tests.py test_run_with_software.py

  software-tests-mac:
    name: Software Tests (macOS)
    needs: tests
    permissions: write-all
    strategy:
      matrix:
        os: [macos-14]
        test_group: [1, 2]
        python-version: ["3.12"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        if: matrix.os == 'macos-14' || matrix.os == 'macos-13'

      - name: Install packages using homebrew
        shell: bash -el {0}
        run: |
          bash
          brew upgrade
          brew install coreutils
          brew install lmod
          brew install micromamba

      - name: Modify python version in test env
        shell: bash -el {0}
        run: |
          cp mac-test-environment.yml test-environment-${{ matrix.python-version }}.yml
          sed -E 's/- conda-forge::python.+/- conda-forge::python =${{ matrix.python-version }}/' test-environment-${{ matrix.python-version }}.yml > tmp.yml
          mv tmp.yml test-environment-${{ matrix.python-version }}.yml

      - name: Manually create env
        shell: bash -el {0}
        run: |
          eval "$(micromamba shell hook --shell bash)"
          micromamba create -n omnibenchmark
          micromamba activate omnibenchmark
          micromamba install -f test-environment-${{ matrix.python-version }}.yml mamba=1

      - name: Modify bashrc
        env:
          CI: true
        shell: bash -el {0}
        run: |
          cat <<'EOF' >>~/.bashrc
          if [ -f /opt/homebrew/opt/lmod/init/bash ]; then
               source /opt/homebrew/opt/lmod/init/profile
          fi
          if [ -f /usr/local/opt/lmod/init/bash ]; then
               source /usr/local/opt/lmod/init/profile
          fi
          eval "$(micromamba shell hook --shell bash)"
          export R_LIBS=~/work/Rlib
          EOF

          cat <<'EOF' >>~/.bash_profile
          source ~/.bashrc
          EOF

      - name: Test
        env:
          CI: true
        shell: bash -el {0}
        run: |
          micromamba activate
          micromamba activate omnibenchmark

          pip install -e ".[s3]"
          pip install -e ".[test]"
          pip install numpy pandas scikit-learn scipy

          cd tests/software

          source "$LMOD_PKG"/init/profile

          export MODULEPATH="$HOME"/.local/easybuild/modules/all:"$GITHUB_WORKSPACE"/tests/data/envs
          module use $MODULEPATH

          export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init

          pytest -v -x --show-capture=stderr \
               --splits 2 --group ${{ matrix.test_group }} \
               conda_tests.py envmodules_tests.py cli_envmodules_tests.py cli_conda_tests.py test_run_with_software.py \
               -k 'not test_easybuild_sys_toolchain_build'
