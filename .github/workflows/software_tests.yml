## updated from Snakemake's test suite
##
## https://raw.githubusercontent.com/snakemake/snakemake/main/.github/workflows/main.yml
## Derivative of (c) 2012-2022 Johannes KÃ¶ster johannes.koester@uni-due.com
## From Koester's license above:
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
## INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
## PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
## FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
## OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
##
## and from easybuilders/easybuild-easyconfigs test suite
##
## Derivative work from Kenneth Hoste and colleagues
## https://github.com/easybuilders/easybuild-easyconfigs/blob/develop/.github/workflows/unit_tests.yml
## GPLv2
## License available at https://github.com/easybuilders/easybuild-easyconfigs/blob/develop/LICENSE

name: software

on:
  # Removed pull_request trigger to avoid duplication with pipeline.yml
  workflow_dispatch: # Allow manual trigger if needed
  push:
    branches:
      - main # Still run on main branch pushes

concurrency:
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  software_testing_linux:
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-22.04]
        test_group: [1, 2]
        python-version: ["3.12"]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Modify python version in test env
        shell: bash -el {0}
        run: |
          cp test-environment.yml test-environment-${{ matrix.python-version }}.yml
          sed -E -i 's/- conda-forge::python.+/- conda-forge::python =${{ matrix.python-version }}/' test-environment-${{ matrix.python-version }}.yml

      - name: Setup omnibenchmark environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
          use-mamba: true
          environment-file: test-environment-${{ matrix.python-version }}.yml
          activate-environment: omnibenchmark

      - name: install OS & Python packages
        run: |
          # disable apt-get update, we don't really need it,
          # and it does more harm than good (it's fairly expensive, and it results in flaky test runs)
          ## # sudo apt-get update
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update # so updating - for singularity
          # for modules tool
          sudo apt-get install lua5.2 liblua5.2-dev lua-filesystem lua-posix tcl tcl-dev
          # fix for lua-posix packaging issue,
          #   see https://bugs.launchpad.net/ubuntu/+source/lua-posix/+bug/1752082
          # needed for Ubuntu 18.04, but not for Ubuntu 20.04, so skipping symlinking if posix.so already exists
          if [ ! -e /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so ] ; then
            sudo ln -s /usr/lib/x86_64-linux-gnu/lua/5.2/posix_c.so /usr/lib/x86_64-linux-gnu/lua/5.2/posix.so
          fi
          # for testing OpenMPI-system*eb we need to have Open MPI installed
          sudo apt-get install libopenmpi-dev openmpi-bin
          # for envmodules testing
          sudo apt-get install lmod
          ## required for test_dep_graph
          pip install pep8 python-graph-core python-graph-dot

      - name: Extra OS / apt (apptainer)
        run: |
          sudo apt install -y stress git wget openmpi-bin libopenmpi-dev apptainer debootstrap

      - name: Test
        shell: bash -el {0}
        run: |
          source "${CONDA}/etc/profile.d/conda.sh"
          conda activate omnibenchmark
          conda info
          conda list
          
          # install the s3 and test extra dependencies
          pip install -e ".[s3]"
          pip install -e ".[test]"

          ## install required python dependencies
          pip install numpy pandas scikit-learn scipy

          cd tests/software

          source "$LMOD_PKG"/init/profile

          export MODULEPATH="$HOME"/.local/easybuild/modules/all:"$GITHUB_WORKSPACE"/tests/data/envs
          module use $MODULEPATH

          module spider 3.6.3-foss-2017b

          # module spider
          export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init

          # invoke pytest
          pytest -v -x --show-capture=stderr \
              --splits 2 --group ${{ matrix.test_group }} --splitting-algorithm=least_duration \
              cli_conda_tests.py cli_singularity_tests.py cli_envmodules_tests.py \
              conda_tests.py singularity_tests.py envmodules_tests.py test_run_with_software.py

  software_testing_mac:
    env:
      CONDA_OVERRIDE_OSX: 14.0
    permissions: write-all
    strategy:
      matrix:
        os: [macos-14] # [macos-14, macos-13]
        test_group: [1, 2]
        python-version: ["3.12"]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
        if: matrix.os == 'macos-14' || matrix.os == 'macos-13'

      - name: Install packages using homebrew
        shell: bash -el {0}
        run: |
          bash
          brew upgrade
          brew install coreutils
          brew install lmod

      - name: Modify python version in test env
        shell: bash -el {0}
        run: |
          cp test-environment.yml test-environment-${{ matrix.python-version }}.yml
          sed -E 's/- conda-forge::python.+/- conda-forge::python =${{ matrix.python-version }}/' test-environment-${{ matrix.python-version }}.yml > tmp.yml
          mv tmp.yml test-environment-${{ matrix.python-version }}.yml

      - name: Setup omnibenchmark environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
          use-mamba: true
          environment-file: test-environment-${{ matrix.python-version }}.yml
          activate-environment: omnibenchmark

      - name: Modify bashrc
        shell: bash -el {0}
        run: |
          cat <<'EOF' >>~/.bashrc
          if [ -f /opt/homebrew/opt/lmod/init/bash ]; then
               source /opt/homebrew/opt/lmod/init/profile
          fi
          if [ -f /usr/local/opt/lmod/init/bash ]; then
               source /usr/local/opt/lmod/init/profile
          fi
          export R_LIBS=~/work/Rlib
          EOF

          cat <<'EOF' >>~/.bash_profile
          source ~/.bashrc
          EOF

      - name: Test
        shell: bash -el {0}
        run: |
          conda info
          conda list
          
          # install the s3 and test extra dependencies
          pip install -e ".[s3]"
          pip install -e ".[test]"

          ## install required Python dependenices
          pip install numpy pandas scikit-learn scipy

          cd tests/software

          source "$LMOD_PKG"/init/profile

          export MODULEPATH="$HOME"/.local/easybuild/modules/all:"$GITHUB_WORKSPACE"/tests/data/envs
          module use $MODULEPATH

          export PYTHONPATH=${PYTHONPATH}:$LMOD_DIR/../init

          pytest -v -x --show-capture=stderr \
               --splits 2 --group ${{ matrix.test_group }} \
               conda_tests.py envmodules_tests.py cli_envmodules_tests.py cli_conda_tests.py test_run_with_software.py \
               -k 'not test_easybuild_sys_toolchain_build'
